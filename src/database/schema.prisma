generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model District {
  id              String         @id @default(cuid())
  name            String
  addressId       String
  daLicenses      Int?
  saLicenses      Int?
  schoolLicenses  Int?
  teacherLicenses Int?
  studentLicenses Int?
  parentLicenses  Int?
  psaLicences     Int?
  about           String         @default("") @db.VarChar(6000)
  banner          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  logo            String?
  address         Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  announcements   Announcement[]
  schools         School[]
  users           User[]
}

model User {
  id                   String                   @id @default(cuid())
  firstName            String?
  lastName             String?
  email                String                   @unique
  phone                String?                  @unique
  birthday             DateTime?
  pronouns             Pronouns?
  profilePicture       String?
  bannerPicture        String?
  bio                  String?
  interests            String?
  tfaEnabled           Boolean?                 @default(false)
  tfaSecret            String?
  confidential         Boolean                  @default(false)
  profileAvailability  ProfileAvailability      @default(PUBLIC)
  password             String
  deleted              Boolean                  @default(false)
  deletedTime          DateTime?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  role                 Roles
  districtId           String?
  schoolId             String?
  accountLinked        Boolean?
  district             District?                @relation(fields: [districtId], references: [id])
  school               School?                  @relation(fields: [schoolId], references: [id])
  AccountLinked        AccountLinked?
  Assignment           Assignment[]
  attendances          Attendance[]
  AuditLog             AuditLog[]
  calendarEvents       CalendarEvent[]
  teacherCourses       Course[]
  files                File[]
  folders              Folder[]
  Grade                Grade[]
  Groups               Group[]
  GropupMessages       GroupMessage[]
  GroupsUsers          GroupUser[]
  interestsAndSkills   InterestOrSkills[]
  knowledgeBases       KnowledgeBase[]
  parents              ParentChild[]            @relation("parents")
  children             ParentChild[]            @relation("children")
  receivedMessage      PrivateMessage[]         @relation("messageTo")
  sentMessage          PrivateMessage[]         @relation("messageFrom")
  QuickInfo            QuickInfo[]
  reports              Report[]
  reportAdminReads     ReportAdminRead[]        @relation("report")
  Schedule             Schedule[]
  Settings             Settings?
  sharedFiles          SharedFile[]
  sharedFolders        SharedFolder[]
  sharedNotes          SharedNote[]
  student              Student?
  studentCourses       StudentToCourse[]
  submissions          Submission[]
  suggestions          Suggestion[]
  suggestionAdminReads SuggestionAdminRead[]    @relation("suggestion")
  teacher              Teacher?
  UserFileAccess       UserFileAccess[]
  MessageGroupsCreated UserMessageGroup[]       @relation("createdByUser")
  UserNotification     UserNotification[]
  userMessageGroups    UserToUserMessageGroup[]
  Announcement         Announcement[]
}

model AccountLinked {
  id               String   @id @default(cuid())
  userId           String   @unique
  provideId        String   @unique
  userVerified     Boolean  @default(false)
  providerVerified Boolean  @default(false)
  createdAt        DateTime @default(now())
  token            String
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model Teacher {
  id      String @id @default(cuid())
  userId  String @unique
  subject String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ParentChild {
  id           String  @id @default(cuid())
  relationship String
  parentId     String
  childId      String
  addressId    String
  address      Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  child        User    @relation("parents", fields: [childId], references: [id], onDelete: Cascade)
  parent       User    @relation("children", fields: [parentId], references: [id], onDelete: Cascade)
}

model Student {
  id     String @id @default(cuid())
  grade  String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id       String  @id @default(cuid())
  userId   String  @unique
  darkMode Boolean
  textSize Int
  user     User    @relation(fields: [userId], references: [id])
}

model CalendarEvent {
  id            String          @id @default(cuid())
  userId        String
  startDate     DateTime
  endDate       DateTime
  description   String?
  recurring     EventRecurring?
  recurringDate DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id            String            @id @default(cuid())
  name          String
  courseCode    String            @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  picture       String?
  description   String            @db.VarChar(6000)
  teacherId     String
  schoolId      String
  school        School            @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacher       User              @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  announcements Announcement[]
  assignments   Assignment[]
  attendances   Attendance[]
  grades        Grade[]
  Notification  Notification[]
  students      StudentToCourse[]
  tests         Test[]
}

model StudentToCourse {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String       @id @default(cuid())
  courseId    String
  title       String
  description String       @db.VarChar(6000)
  due         DateTime
  marks       Int          @default(100)
  visible     Boolean
  folderPath  String?
  comment     String?
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  course      Course       @relation(fields: [courseId], references: [id])
  createdBy   User         @relation(fields: [userId], references: [id])
  submissions Submission[]
}

model Submission {
  id                    String                 @id @default(cuid())
  assignmentId          String
  note                  String?                @db.VarChar(6000)
  comment               String?                @db.VarChar(6000)
  submitterId           String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  assignment            Assignment             @relation(fields: [assignmentId], references: [id])
  submitter             User                   @relation(fields: [submitterId], references: [id])
  submissionAttachments SubmissionAttachment[]
}

model SubmissionAttachment {
  id               String     @id @default(cuid())
  submissionId     String
  linkToAttachment String
  attachmentName   String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  submission       Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Test {
  id                      String          @id @default(cuid())
  courseId                String
  title                   String
  description             String
  due                     DateTime
  open                    Boolean
  limit                   Int
  allowReviewPreviousTest Boolean
  gradeId                 String
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  course                  Course          @relation(fields: [courseId], references: [id])
  grade                   Grade           @relation(fields: [gradeId], references: [id])
  TestQuestions           TestQuestions[]
}

model Grade {
  id           String        @id @default(cuid())
  userId       String
  courseId     String
  comment      String?
  percentage   Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  course       Course        @relation(fields: [courseId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  GradeCateory GradeCateory?
  tests        Test[]
}

model GradeCateory {
  id         String   @id @default(cuid())
  gradeId    String   @unique
  percentage Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  grade      Grade    @relation(fields: [gradeId], references: [id])
}

model TestQuestions {
  id       String @id @default(cuid())
  testId   String
  question String
  points   Int
  test     Test   @relation(fields: [testId], references: [id])
}

model School {
  id            String         @id @default(cuid())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  districtId    String
  addressId     String
  banner        String?
  address       Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  district      District       @relation(fields: [districtId], references: [id])
  announcements Announcement[]
  courses       Course[]
  users         User[]
}

model TimeTable {
  id                String              @id @default(cuid())
  timelineStart     DateTime
  timelineEnd       DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TimeTableActivity TimeTableActivity[]
}

model TimeTableActivity {
  id          String    @id @default(cuid())
  startHour   DateTime
  endHour     DateTime
  title       String
  description String
  dayOfWeek   String
  timeTableId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  timeTable   TimeTable @relation(fields: [timeTableId], references: [id])
}

model Group {
  id           String      @id @default(cuid())
  name         String
  description  String
  photo        String
  adminId      String
  confidential Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  admin        User        @relation(fields: [adminId], references: [id])
  members      GroupUser[]
}

model GroupUser {
  id        String  @id @default(cuid())
  userId    String
  groupId   String
  moderator Boolean @default(false)
  group     Group   @relation(fields: [groupId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Announcement {
  id           String           @id @default(cuid())
  type         AnnouncementType
  title        String
  description  String
  schoolId     String?
  districtId   String?
  courseId     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  course       Course?          @relation(fields: [courseId], references: [id])
  district     District?        @relation(fields: [districtId], references: [id])
  school       School?          @relation(fields: [schoolId], references: [id])
  Notification Notification[]
  userId       String
  user         User             @relation(fields: [userId], references: [id])
}

model Suggestion {
  id                   String                @id @default(cuid())
  title                String                @db.Char(100)
  description          String                @db.VarChar(4000)
  read                 Boolean
  resolution           String?
  starred              Boolean
  submitterId          String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  submitter            User                  @relation(fields: [submitterId], references: [id])
  suggestionAdminReads SuggestionAdminRead[]
}

model SuggestionAdminRead {
  id           String     @id @default(cuid())
  suggestionId String
  adminId      String
  status       ReadStatus @default(UNREAD)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  admin        User       @relation("suggestion", fields: [adminId], references: [id])
  suggestion   Suggestion @relation(fields: [suggestionId], references: [id])
}

model Report {
  id               String            @id @default(cuid())
  title            String
  description      String            @db.VarChar(8000)
  resolved         Boolean
  resolution       String
  reporterId       String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reporter         User              @relation(fields: [reporterId], references: [id])
  reportAdminReads ReportAdminRead[]
}

model ReportAdminRead {
  id        String     @id @default(cuid())
  reportId  String
  adminId   String
  status    ReadStatus @default(UNREAD)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     User       @relation("report", fields: [adminId], references: [id])
  report    Report     @relation(fields: [reportId], references: [id])
}

model QuickInfo {
  id          String   @id @default(cuid())
  title       String?  @db.VarChar(50)
  description String?  @db.VarChar(250)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model PrivateMessage {
  id        String   @id @default(cuid())
  text      String
  filePath  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  toId      String
  fromId    String
  from      User     @relation("messageTo", fields: [fromId], references: [id])
  to        User     @relation("messageFrom", fields: [toId], references: [id])
}

model UserMessageGroup {
  id            String                   @id @default(cuid())
  name          String
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  createdBy     String
  filePath      String?
  createdByUser User                     @relation("createdByUser", fields: [createdBy], references: [id])
  /// Messages within this group
  messages      GroupMessage[]
  /// Users within this group
  users         UserToUserMessageGroup[]
}

model UserToUserMessageGroup {
  id                 String           @id @default(cuid())
  userId             String
  userMessageGroupId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id])
  userMessageGroup   UserMessageGroup @relation(fields: [userMessageGroupId], references: [id])
}

model GroupMessage {
  id             String           @id @default(cuid())
  text           String
  filePath       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  messageGroupId String
  userId         String
  messageGroup   UserMessageGroup @relation(fields: [messageGroupId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
}

model BugReporting {
  id          String   @id @default(cuid())
  title       String
  summary     String   @db.VarChar(250)
  issue       String
  reproduce   String
  consequence String
  phone       String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Attendance {
  id        String     @id @default(cuid())
  courseId  String
  userId    String
  status    AttendType @default(PRESENT)
  day       DateTime   @default(now())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  course    Course     @relation(fields: [courseId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
}

model Address {
  id        String        @id @default(cuid())
  country   String
  state     String
  city      String
  street    String
  number    Int
  zipCode   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  districts District[]
  parents   ParentChild[]
  schools   School[]
}

model KnowledgeBase {
  id          String            @id @default(cuid())
  userId      String
  type        KnowledgeBaseType
  title       String?
  videoUrl    String?
  articlePath String?
  isPublic    Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id     String @id @default(cuid())
  userId String @unique
  token  String @db.VarChar(500)
}

model Note {
  id          String       @id @default(cuid())
  title       String
  content     String       @db.VarChar(6000)
  userId      String
  isPinned    Boolean      @default(false)
  isPublic    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sharedNotes SharedNote[]
}

model SharedNote {
  id           String   @id @default(cuid())
  noteId       String
  sharedWithId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  note         Note     @relation(fields: [noteId], references: [id])
  sharedWith   User     @relation(fields: [sharedWithId], references: [id])
}

model Folder {
  id             String         @id @default(cuid())
  name           String
  color          String?
  userId         String
  parentFolderId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isHidden       Boolean        @default(true)
  description    String?
  parentFolder   Folder?        @relation("FolderHieracy", fields: [parentFolderId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  files          File[]
  subFolders     Folder[]       @relation("FolderHieracy")
  sharedFolders  SharedFolder[]
}

model SharedFolder {
  id           String   @id @default(cuid())
  folderId     String
  sharedWithId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  folder       Folder   @relation(fields: [folderId], references: [id])
  sharedWith   User     @relation(fields: [sharedWithId], references: [id])
}

model File {
  id             String           @id @default(cuid())
  name           String
  type           String
  size           Int
  userId         String
  folderId       String?
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  filePath       String           @unique
  folder         Folder?          @relation(fields: [folderId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  sharedFiles    SharedFile[]
  UserFileAccess UserFileAccess[]
}

model SharedFile {
  id           String   @id @default(cuid())
  fileId       String
  sharedWithId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  file         File     @relation(fields: [fileId], references: [id])
  sharedWith   User     @relation(fields: [sharedWithId], references: [id])
}

model UserFileAccess {
  id        String   @id @default(cuid())
  fileId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  file      File     @relation(fields: [fileId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Schedule {
  id           String   @id @default(cuid())
  userId       String
  title        String
  subtitle     String?
  color        String?
  description  String
  startingTime DateTime
  endingTime   DateTime
  day          String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InterestOrSkills {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id               String             @id @default(cuid())
  targetedUser     TargetType
  announcementId   String?
  title            String
  description      String
  NotificationType NotificationType
  linkToAttachment String?
  courseId         String?
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  announcement     Announcement?      @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  course           Course?            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  UserNotification UserNotification[]
}

model UserNotification {
  id                   String               @id @default(cuid())
  userId               String
  linkToAttachment     String?
  notificationId       String
  notificationSeen     Boolean              @default(false)
  notificationSettings NotificationSettings @default(ON)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now()) @updatedAt
  notification         Notification         @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
  PDA
  DA
  PSA
  SA
  TEACHER
  PARENT
  STUDENT
  CSA
  CCSA
}

enum Pronouns {
  HE_HIM
  SHE_HER
  THEY_THEM
}

enum ProfileAvailability {
  PUBLIC
  PRIVATE
  MIXED
}

enum EventRecurring {
  DAILY
  WEEKLY
  MONTHLY
}

enum AnnouncementType {
  COURSE
  SCHOOL
  DISTRICT
  SITE
}

enum ReadStatus {
  UNREAD
  READ
}

enum AttendType {
  PRESENT
  TARDY
  ABSENT
}

enum KnowledgeBaseType {
  ARTICLE
  VIDEO
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum NotificationType {
  ANNOUNCEMENT
  EVENT
  MESSAGE
  ASSIGNMENT
}

enum TargetType {
  USER
  GROUP
  ALL
  TEACHER
}

enum NotificationSettings {
  ON
  OFF
}